// Copyright (c) coherence ApS.
// For all coherence generated code, the coherence SDK license terms apply. See the license file in the coherence Package root folder for more information.

// <auto-generated>
// Generated file. DO NOT EDIT!
// </auto-generated>
namespace Coherence.Generated
{
	using Coherence.ProtocolDef;
	using Coherence.Serializer;
	using Coherence.SimulationFrame;
	using Coherence.Entity;
	using Coherence.Utils;
	using Coherence.Brook;
	using Coherence.Toolkit;
	using UnityEngine;

	public struct EnemyGroup_id10_UnityEngine__char_46_AI__char_46_NavMeshAgent_8688032914698445319 : ICoherenceComponentData
	{
		public Vector3 destination;
		public float stoppingDistance;
		public Vector3 velocity;
		public Vector3 nextPosition;
		public float baseOffset;
		public bool autoTraverseOffMeshLink;
		public bool autoBraking;
		public bool autoRepath;
		public bool isStopped;
		public int agentTypeID;
		public int walkableMask;
		public int areaMask;
		public float speed;
		public float angularSpeed;
		public float acceleration;
		public bool updatePosition;
		public bool updateRotation;
		public bool updateUpAxis;
		public float radius;
		public float height;
		public int avoidancePriority;
		public bool enabled;

		public override string ToString()
		{
			return $"EnemyGroup_id10_UnityEngine__char_46_AI__char_46_NavMeshAgent_8688032914698445319(destination: {destination}, stoppingDistance: {stoppingDistance}, velocity: {velocity}, nextPosition: {nextPosition}, baseOffset: {baseOffset}, autoTraverseOffMeshLink: {autoTraverseOffMeshLink}, autoBraking: {autoBraking}, autoRepath: {autoRepath}, isStopped: {isStopped}, agentTypeID: {agentTypeID}, walkableMask: {walkableMask}, areaMask: {areaMask}, speed: {speed}, angularSpeed: {angularSpeed}, acceleration: {acceleration}, updatePosition: {updatePosition}, updateRotation: {updateRotation}, updateUpAxis: {updateUpAxis}, radius: {radius}, height: {height}, avoidancePriority: {avoidancePriority}, enabled: {enabled})";
		}

		public uint GetComponentType() => Definition.InternalEnemyGroup_id10_UnityEngine__char_46_AI__char_46_NavMeshAgent_8688032914698445319;

		public const int order = 0;

		public int GetComponentOrder() => order;

		public AbsoluteSimulationFrame Frame;
	
		private static readonly int _agentTypeID_Min = -2147483648;
		private static readonly int _agentTypeID_Max = 2147483647;
		private static readonly int _walkableMask_Min = -2147483648;
		private static readonly int _walkableMask_Max = 2147483647;
		private static readonly int _areaMask_Min = -2147483648;
		private static readonly int _areaMask_Max = 2147483647;
		private static readonly int _avoidancePriority_Min = -2147483648;
		private static readonly int _avoidancePriority_Max = 2147483647;

		public void SetSimulationFrame(AbsoluteSimulationFrame frame)
		{
			Frame = frame;
		}

		public AbsoluteSimulationFrame GetSimulationFrame() => Frame;

		public ICoherenceComponentData MergeWith(ICoherenceComponentData data, uint mask)
		{
			var other = (EnemyGroup_id10_UnityEngine__char_46_AI__char_46_NavMeshAgent_8688032914698445319)data;
			if ((mask & 0x01) != 0)
			{
				Frame = other.Frame;
				destination = other.destination;
			}
			mask >>= 1;
			if ((mask & 0x01) != 0)
			{
				Frame = other.Frame;
				stoppingDistance = other.stoppingDistance;
			}
			mask >>= 1;
			if ((mask & 0x01) != 0)
			{
				Frame = other.Frame;
				velocity = other.velocity;
			}
			mask >>= 1;
			if ((mask & 0x01) != 0)
			{
				Frame = other.Frame;
				nextPosition = other.nextPosition;
			}
			mask >>= 1;
			if ((mask & 0x01) != 0)
			{
				Frame = other.Frame;
				baseOffset = other.baseOffset;
			}
			mask >>= 1;
			if ((mask & 0x01) != 0)
			{
				Frame = other.Frame;
				autoTraverseOffMeshLink = other.autoTraverseOffMeshLink;
			}
			mask >>= 1;
			if ((mask & 0x01) != 0)
			{
				Frame = other.Frame;
				autoBraking = other.autoBraking;
			}
			mask >>= 1;
			if ((mask & 0x01) != 0)
			{
				Frame = other.Frame;
				autoRepath = other.autoRepath;
			}
			mask >>= 1;
			if ((mask & 0x01) != 0)
			{
				Frame = other.Frame;
				isStopped = other.isStopped;
			}
			mask >>= 1;
			if ((mask & 0x01) != 0)
			{
				Frame = other.Frame;
				agentTypeID = other.agentTypeID;
			}
			mask >>= 1;
			if ((mask & 0x01) != 0)
			{
				Frame = other.Frame;
				walkableMask = other.walkableMask;
			}
			mask >>= 1;
			if ((mask & 0x01) != 0)
			{
				Frame = other.Frame;
				areaMask = other.areaMask;
			}
			mask >>= 1;
			if ((mask & 0x01) != 0)
			{
				Frame = other.Frame;
				speed = other.speed;
			}
			mask >>= 1;
			if ((mask & 0x01) != 0)
			{
				Frame = other.Frame;
				angularSpeed = other.angularSpeed;
			}
			mask >>= 1;
			if ((mask & 0x01) != 0)
			{
				Frame = other.Frame;
				acceleration = other.acceleration;
			}
			mask >>= 1;
			if ((mask & 0x01) != 0)
			{
				Frame = other.Frame;
				updatePosition = other.updatePosition;
			}
			mask >>= 1;
			if ((mask & 0x01) != 0)
			{
				Frame = other.Frame;
				updateRotation = other.updateRotation;
			}
			mask >>= 1;
			if ((mask & 0x01) != 0)
			{
				Frame = other.Frame;
				updateUpAxis = other.updateUpAxis;
			}
			mask >>= 1;
			if ((mask & 0x01) != 0)
			{
				Frame = other.Frame;
				radius = other.radius;
			}
			mask >>= 1;
			if ((mask & 0x01) != 0)
			{
				Frame = other.Frame;
				height = other.height;
			}
			mask >>= 1;
			if ((mask & 0x01) != 0)
			{
				Frame = other.Frame;
				avoidancePriority = other.avoidancePriority;
			}
			mask >>= 1;
			if ((mask & 0x01) != 0)
			{
				Frame = other.Frame;
				enabled = other.enabled;
			}
			mask >>= 1;
			return this;
		}

		public static void Serialize(EnemyGroup_id10_UnityEngine__char_46_AI__char_46_NavMeshAgent_8688032914698445319 data, uint mask, IOutProtocolBitStream bitStream)
		{
			if (bitStream.WriteMask((mask & 0x01) != 0))
			{
				bitStream.WriteVector3((data.destination.ToCoreVector3()), FloatMeta.NoCompression());
			}
			mask >>= 1;
			if (bitStream.WriteMask((mask & 0x01) != 0))
			{
				bitStream.WriteFloat(data.stoppingDistance, FloatMeta.NoCompression());
			}
			mask >>= 1;
			if (bitStream.WriteMask((mask & 0x01) != 0))
			{
				bitStream.WriteVector3((data.velocity.ToCoreVector3()), FloatMeta.NoCompression());
			}
			mask >>= 1;
			if (bitStream.WriteMask((mask & 0x01) != 0))
			{
				bitStream.WriteVector3((data.nextPosition.ToCoreVector3()), FloatMeta.NoCompression());
			}
			mask >>= 1;
			if (bitStream.WriteMask((mask & 0x01) != 0))
			{
				bitStream.WriteFloat(data.baseOffset, FloatMeta.NoCompression());
			}
			mask >>= 1;
			if (bitStream.WriteMask((mask & 0x01) != 0))
			{
				bitStream.WriteBool(data.autoTraverseOffMeshLink);
			}
			mask >>= 1;
			if (bitStream.WriteMask((mask & 0x01) != 0))
			{
				bitStream.WriteBool(data.autoBraking);
			}
			mask >>= 1;
			if (bitStream.WriteMask((mask & 0x01) != 0))
			{
				bitStream.WriteBool(data.autoRepath);
			}
			mask >>= 1;
			if (bitStream.WriteMask((mask & 0x01) != 0))
			{
				bitStream.WriteBool(data.isStopped);
			}
			mask >>= 1;
			if (bitStream.WriteMask((mask & 0x01) != 0))
			{
				Coherence.Utils.Bounds.Check(data.agentTypeID, _agentTypeID_Min, _agentTypeID_Max, "EnemyGroup_id10_UnityEngine__char_46_AI__char_46_NavMeshAgent_8688032914698445319.agentTypeID");
				data.agentTypeID = Coherence.Utils.Bounds.Clamp(data.agentTypeID, _agentTypeID_Min, _agentTypeID_Max);
				bitStream.WriteIntegerRange(data.agentTypeID, 32, -2147483648);
			}
			mask >>= 1;
			if (bitStream.WriteMask((mask & 0x01) != 0))
			{
				Coherence.Utils.Bounds.Check(data.walkableMask, _walkableMask_Min, _walkableMask_Max, "EnemyGroup_id10_UnityEngine__char_46_AI__char_46_NavMeshAgent_8688032914698445319.walkableMask");
				data.walkableMask = Coherence.Utils.Bounds.Clamp(data.walkableMask, _walkableMask_Min, _walkableMask_Max);
				bitStream.WriteIntegerRange(data.walkableMask, 32, -2147483648);
			}
			mask >>= 1;
			if (bitStream.WriteMask((mask & 0x01) != 0))
			{
				Coherence.Utils.Bounds.Check(data.areaMask, _areaMask_Min, _areaMask_Max, "EnemyGroup_id10_UnityEngine__char_46_AI__char_46_NavMeshAgent_8688032914698445319.areaMask");
				data.areaMask = Coherence.Utils.Bounds.Clamp(data.areaMask, _areaMask_Min, _areaMask_Max);
				bitStream.WriteIntegerRange(data.areaMask, 32, -2147483648);
			}
			mask >>= 1;
			if (bitStream.WriteMask((mask & 0x01) != 0))
			{
				bitStream.WriteFloat(data.speed, FloatMeta.NoCompression());
			}
			mask >>= 1;
			if (bitStream.WriteMask((mask & 0x01) != 0))
			{
				bitStream.WriteFloat(data.angularSpeed, FloatMeta.NoCompression());
			}
			mask >>= 1;
			if (bitStream.WriteMask((mask & 0x01) != 0))
			{
				bitStream.WriteFloat(data.acceleration, FloatMeta.NoCompression());
			}
			mask >>= 1;
			if (bitStream.WriteMask((mask & 0x01) != 0))
			{
				bitStream.WriteBool(data.updatePosition);
			}
			mask >>= 1;
			if (bitStream.WriteMask((mask & 0x01) != 0))
			{
				bitStream.WriteBool(data.updateRotation);
			}
			mask >>= 1;
			if (bitStream.WriteMask((mask & 0x01) != 0))
			{
				bitStream.WriteBool(data.updateUpAxis);
			}
			mask >>= 1;
			if (bitStream.WriteMask((mask & 0x01) != 0))
			{
				bitStream.WriteFloat(data.radius, FloatMeta.NoCompression());
			}
			mask >>= 1;
			if (bitStream.WriteMask((mask & 0x01) != 0))
			{
				bitStream.WriteFloat(data.height, FloatMeta.NoCompression());
			}
			mask >>= 1;
			if (bitStream.WriteMask((mask & 0x01) != 0))
			{
				Coherence.Utils.Bounds.Check(data.avoidancePriority, _avoidancePriority_Min, _avoidancePriority_Max, "EnemyGroup_id10_UnityEngine__char_46_AI__char_46_NavMeshAgent_8688032914698445319.avoidancePriority");
				data.avoidancePriority = Coherence.Utils.Bounds.Clamp(data.avoidancePriority, _avoidancePriority_Min, _avoidancePriority_Max);
				bitStream.WriteIntegerRange(data.avoidancePriority, 32, -2147483648);
			}
			mask >>= 1;
			if (bitStream.WriteMask((mask & 0x01) != 0))
			{
				bitStream.WriteBool(data.enabled);
			}
			mask >>= 1;
		}

		public static (EnemyGroup_id10_UnityEngine__char_46_AI__char_46_NavMeshAgent_8688032914698445319, uint, uint?) Deserialize(InProtocolBitStream bitStream)
		{
			var mask = (uint)0;
			var val = new EnemyGroup_id10_UnityEngine__char_46_AI__char_46_NavMeshAgent_8688032914698445319();
	
			if (bitStream.ReadMask())
			{
				val.destination = (bitStream.ReadVector3(FloatMeta.NoCompression())).ToUnityVector3();
				mask |= 0b00000000000000000000000000000001;
			}
			if (bitStream.ReadMask())
			{
				val.stoppingDistance = bitStream.ReadFloat(FloatMeta.NoCompression());
				mask |= 0b00000000000000000000000000000010;
			}
			if (bitStream.ReadMask())
			{
				val.velocity = (bitStream.ReadVector3(FloatMeta.NoCompression())).ToUnityVector3();
				mask |= 0b00000000000000000000000000000100;
			}
			if (bitStream.ReadMask())
			{
				val.nextPosition = (bitStream.ReadVector3(FloatMeta.NoCompression())).ToUnityVector3();
				mask |= 0b00000000000000000000000000001000;
			}
			if (bitStream.ReadMask())
			{
				val.baseOffset = bitStream.ReadFloat(FloatMeta.NoCompression());
				mask |= 0b00000000000000000000000000010000;
			}
			if (bitStream.ReadMask())
			{
				val.autoTraverseOffMeshLink = bitStream.ReadBool();
				mask |= 0b00000000000000000000000000100000;
			}
			if (bitStream.ReadMask())
			{
				val.autoBraking = bitStream.ReadBool();
				mask |= 0b00000000000000000000000001000000;
			}
			if (bitStream.ReadMask())
			{
				val.autoRepath = bitStream.ReadBool();
				mask |= 0b00000000000000000000000010000000;
			}
			if (bitStream.ReadMask())
			{
				val.isStopped = bitStream.ReadBool();
				mask |= 0b00000000000000000000000100000000;
			}
			if (bitStream.ReadMask())
			{
				val.agentTypeID = bitStream.ReadIntegerRange(32, -2147483648);
				mask |= 0b00000000000000000000001000000000;
			}
			if (bitStream.ReadMask())
			{
				val.walkableMask = bitStream.ReadIntegerRange(32, -2147483648);
				mask |= 0b00000000000000000000010000000000;
			}
			if (bitStream.ReadMask())
			{
				val.areaMask = bitStream.ReadIntegerRange(32, -2147483648);
				mask |= 0b00000000000000000000100000000000;
			}
			if (bitStream.ReadMask())
			{
				val.speed = bitStream.ReadFloat(FloatMeta.NoCompression());
				mask |= 0b00000000000000000001000000000000;
			}
			if (bitStream.ReadMask())
			{
				val.angularSpeed = bitStream.ReadFloat(FloatMeta.NoCompression());
				mask |= 0b00000000000000000010000000000000;
			}
			if (bitStream.ReadMask())
			{
				val.acceleration = bitStream.ReadFloat(FloatMeta.NoCompression());
				mask |= 0b00000000000000000100000000000000;
			}
			if (bitStream.ReadMask())
			{
				val.updatePosition = bitStream.ReadBool();
				mask |= 0b00000000000000001000000000000000;
			}
			if (bitStream.ReadMask())
			{
				val.updateRotation = bitStream.ReadBool();
				mask |= 0b00000000000000010000000000000000;
			}
			if (bitStream.ReadMask())
			{
				val.updateUpAxis = bitStream.ReadBool();
				mask |= 0b00000000000000100000000000000000;
			}
			if (bitStream.ReadMask())
			{
				val.radius = bitStream.ReadFloat(FloatMeta.NoCompression());
				mask |= 0b00000000000001000000000000000000;
			}
			if (bitStream.ReadMask())
			{
				val.height = bitStream.ReadFloat(FloatMeta.NoCompression());
				mask |= 0b00000000000010000000000000000000;
			}
			if (bitStream.ReadMask())
			{
				val.avoidancePriority = bitStream.ReadIntegerRange(32, -2147483648);
				mask |= 0b00000000000100000000000000000000;
			}
			if (bitStream.ReadMask())
			{
				val.enabled = bitStream.ReadBool();
				mask |= 0b00000000001000000000000000000000;
			}
			return (val, mask, null);
		}
		public static (EnemyGroup_id10_UnityEngine__char_46_AI__char_46_NavMeshAgent_8688032914698445319, uint, uint?) DeserializeArchetypeEnemyGroup_dc358293f079f194ab5ec7d1d043818f_EnemyGroup_id10_UnityEngine__char_46_AI__char_46_NavMeshAgent_8688032914698445319_LOD0(InProtocolBitStream bitStream)
		{
			var mask = (uint)0;
			var val = new EnemyGroup_id10_UnityEngine__char_46_AI__char_46_NavMeshAgent_8688032914698445319();
			if (bitStream.ReadMask())
			{
				val.destination = (bitStream.ReadVector3(FloatMeta.NoCompression())).ToUnityVector3();
				mask |= 0b00000000000000000000000000000001;
			}
			if (bitStream.ReadMask())
			{
				val.stoppingDistance = bitStream.ReadFloat(FloatMeta.NoCompression());
				mask |= 0b00000000000000000000000000000010;
			}
			if (bitStream.ReadMask())
			{
				val.velocity = (bitStream.ReadVector3(FloatMeta.NoCompression())).ToUnityVector3();
				mask |= 0b00000000000000000000000000000100;
			}
			if (bitStream.ReadMask())
			{
				val.nextPosition = (bitStream.ReadVector3(FloatMeta.NoCompression())).ToUnityVector3();
				mask |= 0b00000000000000000000000000001000;
			}
			if (bitStream.ReadMask())
			{
				val.baseOffset = bitStream.ReadFloat(FloatMeta.NoCompression());
				mask |= 0b00000000000000000000000000010000;
			}
			if (bitStream.ReadMask())
			{
				val.autoTraverseOffMeshLink = bitStream.ReadBool();
				mask |= 0b00000000000000000000000000100000;
			}
			if (bitStream.ReadMask())
			{
				val.autoBraking = bitStream.ReadBool();
				mask |= 0b00000000000000000000000001000000;
			}
			if (bitStream.ReadMask())
			{
				val.autoRepath = bitStream.ReadBool();
				mask |= 0b00000000000000000000000010000000;
			}
			if (bitStream.ReadMask())
			{
				val.isStopped = bitStream.ReadBool();
				mask |= 0b00000000000000000000000100000000;
			}
			if (bitStream.ReadMask())
			{
				val.agentTypeID = bitStream.ReadIntegerRange(32, -2147483648);
				mask |= 0b00000000000000000000001000000000;
			}
			if (bitStream.ReadMask())
			{
				val.walkableMask = bitStream.ReadIntegerRange(32, -2147483648);
				mask |= 0b00000000000000000000010000000000;
			}
			if (bitStream.ReadMask())
			{
				val.areaMask = bitStream.ReadIntegerRange(32, -2147483648);
				mask |= 0b00000000000000000000100000000000;
			}
			if (bitStream.ReadMask())
			{
				val.speed = bitStream.ReadFloat(FloatMeta.NoCompression());
				mask |= 0b00000000000000000001000000000000;
			}
			if (bitStream.ReadMask())
			{
				val.angularSpeed = bitStream.ReadFloat(FloatMeta.NoCompression());
				mask |= 0b00000000000000000010000000000000;
			}
			if (bitStream.ReadMask())
			{
				val.acceleration = bitStream.ReadFloat(FloatMeta.NoCompression());
				mask |= 0b00000000000000000100000000000000;
			}
			if (bitStream.ReadMask())
			{
				val.updatePosition = bitStream.ReadBool();
				mask |= 0b00000000000000001000000000000000;
			}
			if (bitStream.ReadMask())
			{
				val.updateRotation = bitStream.ReadBool();
				mask |= 0b00000000000000010000000000000000;
			}
			if (bitStream.ReadMask())
			{
				val.updateUpAxis = bitStream.ReadBool();
				mask |= 0b00000000000000100000000000000000;
			}
			if (bitStream.ReadMask())
			{
				val.radius = bitStream.ReadFloat(FloatMeta.NoCompression());
				mask |= 0b00000000000001000000000000000000;
			}
			if (bitStream.ReadMask())
			{
				val.height = bitStream.ReadFloat(FloatMeta.NoCompression());
				mask |= 0b00000000000010000000000000000000;
			}
			if (bitStream.ReadMask())
			{
				val.avoidancePriority = bitStream.ReadIntegerRange(32, -2147483648);
				mask |= 0b00000000000100000000000000000000;
			}
			if (bitStream.ReadMask())
			{
				val.enabled = bitStream.ReadBool();
				mask |= 0b00000000001000000000000000000000;
			}

			return (val, mask, 0);
		}

		/// <summary>
		/// Resets byte array references to the local array instance that is kept in the lastSentData.
		/// If the array content has changed but remains of same length, the new content is copied into the local array instance.
		/// If the array length has changed, the array is cloned and overwrites the local instance.
		/// If the array has not changed, the reference is reset to the local array instance.
		/// Otherwise, changes to other fields on the component might cause the local array instance reference to become permanently lost.
		/// </summary>
		public void ResetByteArrays(ICoherenceComponentData lastSent, uint mask)
		{
			var last = lastSent as EnemyGroup_id10_UnityEngine__char_46_AI__char_46_NavMeshAgent_8688032914698445319?;
	
		}
	}
}